# -*- coding: utf-8 -*-
#设置本地服务端参数，修改后需要重启才能生效
server['listen'] = ('127.0.0.1', 8086) #监听地址
server['log_file'] = None #''不记录 None终端 filename文件
server['keep_alive'] = True #是否使用Keep-Alive，可能有负面影响

#设置plugins，需要停用可在plugins['xxx']='yyy'前面加#，保存后生效

#指定GAE服务端，设置多个时后面的继承前一个的设置，所以后面的指定一个url就行了，
#而且推荐这么设置，可设置参数有url、key、crypto、proxy、headers、range0、range、
#max_threads，分别表示服务端url、密码、加密模式、连接服务端的代理（格式与下面
#rawproxy中相同）、连接服务端的headers、首次分块大小、分块下载时每块大小、分块下
#载时最大线程数。分块时线程数=min(服务端总个数的2倍, max_threads, 块数)，如果觉
#得过多可使用max_threads参数进行限制；如果无法使用其他加密模式，可将crypto设为
#'XOR--0'来使用Python实现的异或，如果不需加密，将crypto设为'XOR--0'并将key设为''
gaeproxy = [{
    'url': 'http://zfsemf.appspot.com/fetch.php',
    'key': 'a40d0c6d5709c2f8b',
    'crypto':'AES-CBC-32',
}]
plugins['plugins.gaeproxy'] = 'gaeproxy'

#在这里设置0.4.0版的服务端（GAE或PHP），格式与上面相同
forold = []
plugins['plugins.forold'] = 'forold'

#如果GAE与PHP均使用forold插件，可在此函数中将它们用不同的变量名表示
#def __init__():
#    global gaeproxy, phpproxy
#    gaeproxy, phpproxy = forold[:-1], forold[-1:]
#    __del__.add('forold')

#效果类似于修改hosts
hosts = '''
www.google.cn .appspot.com
'''
plugins['plugins.hosts'] = 'hosts'

#根据AutoProxy规则生成PAC用于浏览器或者提供判断函数用于find_http_handler，可指定
#多个网址，如需代理，格式由url改为(url, proxy)，代理格式与下面rawproxy中设置相同
autoproxy = {}
autoproxy['PROXY 127.0.0.1:8086; DIRECT'] =(
    ('http://autoproxy-gfwlist.googlecode.com/svn/trunk/gfwlist.txt','http://127.0.0.1:8086'),
    'file://userlist.ini'
)
#如果有使用AutoProxy规则的其他代理，可继续按autoproxy['PROXY ...'] = ()格式添加
#注释下行则提供函数，否则生成PAC
autoproxy = autoproxy, 'proxy.pac'; __del__.add('autoproxy')
plugins['plugins.autoproxy'] = 'autoproxy'

#与一般意义上的代理相同，支持http、https、socks4、socks5，设置格式形如
#'http://127.0.0.1:8086'或者多个级联，如('socks5://1.1.1.1:1','http://2.2.2.2:2')
rawproxy = (None, ('socks5://1.1.1.1:1','http://2.2.2.2:2'))
plugins['plugins.rawproxy'] = 'rawproxy'

#用伪造证书来代理https
fakehttps = None
plugins['plugins.fakehttps'] = 'fakehttps'

#http(包括用fakehttps转来的https)代理选择函数
# Note: url is not a string: for 'http://localhost:8086/index.html?arg=1'
#       you can use url.scheme, url.hostname, url.port, url.path, url.query
#       to get what you want, if you need the whole url, use url.geturl()
#       if you want to get ip of the hostname, use url.ip you will get a
#       pair like (['127.0.0.1'], ['::1'])
#   >>> URL('http://localhost:8086/index.html?arg=1')
#   URL(scheme='http', hostname='localhost', port=8086, username=None, 
#   password=None, path='/index.html', params='', query='arg=1', fragment='')
def find_http_handler(method, url, headers):
    if method not in ('GET', 'HEAD', 'PUT', 'POST', 'DELETE'):
        return forold
    if method=='DELETE' or int(headers.get('content-length', 0))>0x100000:
        return forold
    if 80<=url.port<=90 or 440<=url.port<=450 or url.port>=1024:
        return gaeproxy
    return forold

#本地服务端支持http、https、socks4、socks5，但需要相应的处理插件来实现
# reqtype: https/socks4/socks5
# ip, port, cmd are same to args of check_client for socks4/socks5
def find_sock_handler(reqtype, ip, port, cmd):
    if reqtype == 'https': return fakehttps
    return rawproxy[0]

#验证用户有效性，如果仅供个人使用，return True即可
# ip: client ip
# reqtype: http/https/socks4/socks5
# args: (method, url, headers) for http
# args: (host, port, headers) for https
# args: (cmd, ip, port, userid) for socks4
# args: (cmd, ip, port, username, password) for socks5
# please return True if client user is valid else False
def check_client(ip, reqtype, args):
    return True